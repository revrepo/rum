#!/bin/bash
#
# QA Robot for RUM

SCRIPTNAME=$0
PID=$$
FROM_IP="206.190.36.45"
CUBE_DOMAIN="rum_workflow_test_iad02-rum01.revdn.net"
CUBE_HOST="TESTSJC20-CUBE02.revsw.net"
MONGO_HOST="TESTSJC20-RMDB01.revsw.net"
RUM_SERVER="TESTRUMSERVER01.revsw.net"
CUBE_PORT=1081
STOP_TIME=`date +%Y-%m-%dT%H:%M:%S.460Z`
START_TIME=`date +%Y-%m-%dT%H:%M:%S.460Z -d "10 minutes ago"`
WARNING=6
CRITICAL=5
RUNNUMBER=100


STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
STATE_DEPENDENT=4

function log_message () {
        SEVERITY=$1
        MESSAGE=$2
#         echo `date` "$SCRIPTNAME[$PID]: $SERERITY $MESSAGE"
        logger -t "$SCRIPTNAME[$PID]" $MESSAGE
}

function usage () {
cat <<EOF

usage: $0 [ -h ] [ -d TEST_DOMAIN ] [ -H CUBE_SERVER ] [ -p CUBE_PORT ] [ -i FROM_IP ] [ -r RUM_SERVER ]

Available options:
      TEST_DOMAIN         - the domain RUM data is test for (default value "$CUBE_DOMAIN")
      CUBE_SERVER         - the name of CUBE "evaluator" service the RUM data should be fetched from (default value "$CUBE_HOST")
      CUBE_PORT           - the TCP port of CUBE "evaluator" service (default value "$CUBE_PORT")
      FROM_IP		  - set the from IP address (default is "$FROM_IP")
      RUM_SERVER	  - the RUM server to use (default value is "$RUM_SERVER")
EOF
exit 1
}

while getopts "hd:H:p:w:c:" OPTION; do
  case "$OPTION" in
    h) usage ;;
    d) CUBE_DOMAIN=$OPTARG ;;
    H) CUBE_HOST=$OPTARG ;;
    i) FROM_IP=$OPTARG ;;
    p) CUBE_PORT=$OPTARG ;;
    r) RUM_SERVER=$OPTARG ;;
  esac
done


IFTEST=`/sbin/ifconfig -a | grep $FROM_IP`

if [ "$IFTEST" == "" ] ; then
	echo "The FROM_IP $FROM_IP is not on this system"
	exit;
fi

RANDOM_FOUR=`tr -dc 0-9 < /dev/urandom | head -c4`

BASE_URL="http://TESTRUMSERVER01.revsw.net/service?request=nw_info&"
USER_IP="user_ip=$FROM_IP&"
RT_START="rt.start=navigation&"
RT_TSTART_VAR="141453091$RANDOM_FOUR"
RT_TSTART="rt.tstart=$RT_TSTART_VAR&"
RT_BSTART_VAR="141453092$RANDOM_FOUR"
RT_BSTART="rt.bstart=$RT_BSTART_VAR&"
RT_END="rt.end=141453093$RANDOM_FOUR&"
T_RESP="t_resp=962&"
T_PAGE="t_page=6158&"
T_DONE="t_done=7120&"
SINGLE_R="r=&"
T_OTHER="t_other=boomerang%7C2%2Cboomr_fb%7C750%2Ct_domloaded%7C1157&"
NT="nt=1&"
NT_RED_CNT="nt_red_cnt=0&"
NT_NAV_TYPE="nt_nav_type=0&"
NT_NAV_ST_VAR="141453094$RANDOM_FOUR"
NT_NAV_ST="nt_nav_st=$NT_NAV_ST_VAR&"
NT_RED_ST_VAR="0"
NT_RED_ST="nt_red_st=$NT_RED_ST_VAR&"
NT_RED_END_VAR="0"
NT_RED_END="nt_red_end=$NT_RED_END_VAR&"
NT_FET_ST_VAR="141453095$RANDOM_FOUR"
NT_FET_ST="nt_fet_st=$NT_FET_ST_VAR&"
NT_DNS_ST_VAR="141453096$RANDOM_FOUR"
NT_DNS_ST="nt_dns_st=$NT_DNS_ST_VAR&"
NT_DNS_END_VAR="141453097$RANDOM_FOUR"
NT_DNS_END="nt_dns_end=$NT_DNS_END_VAR&"
NT_CON_ST_VAR="141453098$RANDOM_FOUR"
NT_CON_ST="nt_con_st=$NT_CON_ST_VAR&"
NT_CON_END_VAR="141453099$RANDOM_FOUR"
NT_CON_END="nt_con_end=$NT_CON_END_VAR&"
NT_REQ_ST_VAR="141453100$RANDOM_FOUR"
NT_REQ_ST="nt_req_st=$NT_REQ_ST_VAR&"

NT_RES_ST_VAR="141453101$RANDOM_FOUR"
NT_RES_ST="nt_res_st=$NT_RES_ST_VAR&"

NT_RES_END_VAR="141453102$RANDOM_FOUR"
NT_RES_END="nt_res_end=$NT_RES_END_VAR&"

NT_DOWNLOADING_VAR="141453103$RANDOM_FOUR"
NT_DOWNLOADING="nt_domloading=$NT_DOWNLOADING_VAR&"

NT_DOMINT_VAR="141453104$RANDOM_FOUR"
NT_DOMINT="nt_domint=$NT_DOMINT_VAR&"

NT_DOMCONTLOADED_ST_VAR="141453105$RANDOM_FOUR"
NT_DOMCONTLOADED_ST="nt_domcontloaded_st=$NT_DOMCONTLOADED_ST_VAR&"

NT_DOMCONTENTLOADED_END_VAR="141453106$RANDOM_FOUR"
NT_DOMCONTENTLOADED_END="nt_domcontloaded_end=$NT_DOMCONTENTLOADED_END_VAR&"

NT_DOMCOMP_VAR="141453107$RANDOM_FOUR"
NT_DOMCOMP="nt_domcomp=$NT_DOMCOMP_VAR&"

NT_LOAD_ST_VAR="141453108$RANDOM_FOUR"
NT_LOAD_ST="nt_load_st=$NT_LOAD_ST_VAR&"

NT_LOAD_END_VAR="141453109$RANDOM_FOUR"
NT_LOAD_END="nt_load_end=$NT_LOAD_END_VAR&"

NT_UNLOAD_ST="nt_unload_st=0&"

NT_UNLOAD_END="nt_unload_end=0&"

NT_SSL_ST_VAR="141453110$RANDOM_FOUR"
NT_SSL_ST="nt_ssl_st=$NT_SSL_ST_VAR&"

NT_SPDY="nt_spdy=0&"

NT_FIRST_PAINT="nt_first_paint=0&"
V_ALONE="v=0.9.1396020860&"
U_ALONE="u=http%3A%2F%2Frum_workflow_test_iad02-rum01.revdn.net%2F"


RUM_URL_TEST1=$BASE_URL$USER_IP$RT_START$RT_TSTART$RT_BSTART$RT_END$T_RESP$T_PAGE$T_DONE$SINGLE_R$T_OTHER$NT$NT_RED_CNT$NT_NAV_TYPE$NT_NAV_ST$NT_RED_ST$NT_RED_END$NT_FET_ST$NT_DNS_ST$NT_DNS_END$NT_CON_ST$NT_CON_END$NT_REQ_ST$NT_RES_ST$NT_RES_END$NT_DOWNLOADING$NT_DOMINT$NT_DOMCONTLOADED_ST$NT_DOMCONTENTLOADED_END$NT_DOMCOMP$NT_LOAD_ST$NT_LOAD_END$NT_UNLOAD_ST$NT_UNLOAD_END$NT_SSL_ST$NT_SPDY$NT_FIRST_PAINT$V_ALONE$U_ALONE
RUM_URL_TEST2=$BASE_URL$NT$NT_CON_END$NT_CON_ST$NT_DNS_END$NT_DNS_ST$NT_DOMCOMP$NT_DOMCONTENTLOADED_END$NT_DOMCONTLOADED_ST$NT_DOMINT$NT_DOWNLOADING$NT_FET_ST$NT_FIRST_PAINT$V_ALONE$NT_LOAD_END$NT_LOAD_ST$NT_NAV_ST$NT_NAV_TYPE$NT_RED_CNT$NT_RED_END$NT_RED_ST$NT_REQ_ST$NT_RES_END$NT_RES_ST$NT_SPDY$NT_SSL_ST$NT_UNLOAD_END$NT_UNLOAD_ST$RT_BSTART$RT_END$RT_START$RT_TSTART$SINGLE_R$T_DONE$T_OTHER$T_PAGE$T_RESP$U_ALONE$USER_IP
RUM_URL_TEST3=$BASE_URL$USER_IP$U_ALONE$T_RESP$T_PAGE$T_OTHER$T_DONE$SINGLE_R$RT_TSTART$RT_START$RT_END$RT_BSTART$NT_UNLOAD_ST$NT_UNLOAD_END$NT_SSL_ST$NT_SPDY$NT_RES_ST$NT_RES_END$NT_REQ_ST$NT_RED_ST$NT_RED_END$NT_RED_CNT$NT_NAV_TYPE$NT_NAV_ST$NT_LOAD_ST$NT_LOAD_END$NT_FIRST_PAINT$V_ALONE$NT_FET_ST$NT_DOWNLOADING$NT_DOMINT$NT_DOMCONTLOADED_ST$NT_DOMCONTENTLOADED_END$NT_DOMCOMP$NT_DNS_ST$NT_DNS_END$NT_CON_ST$NT_CON_END$NT
# Breaks NT_DOMINT
RUM_URL_TEST4=$BASE_URL$NT_LOAD_END$NT_DOWNLOADING$NT_DOMCOMP$SINGLE_R$NT_DNS_END$NT_CON_ST$NT_RED_CNT$NT_UNLOAD_END$RT_TSTART$NT_DOMCONTENTLOADED_END$T_DONE$NT_FET_ST$T_PAGE$NT_FIRST_PAINT$V_ALONE$NT_UNLOAD_ST$NT_RED_ST$NT_SPDY$NT_NAV_TYPE$RT_BSTART$RT_START$NT_SSL_ST$NT_CON_END$NT_RED_END$NT_RES_ST$RT_END$NT$NT_RES_END$NT_DNS_ST$NT_LOAD_ST$NT_REQ_ST$T_RESP$U_ALONE$NT_DOMINT$NT_NAV_ST$USER_IP$NT_DOMCONTLOADED_ST$T_OTHER

## Broken URLs
RUM_URL_TEST5=$BASE_URL$NT_RES_ST$NT_RES_END$NT_DOWNLOADING$NT_UNLOAD_END$USER_IP$RT_START$RT_END$T_RESP$T_PAGE$T_DONE$SINGLE_R$T_OTHER$NT$NT_RED_CNT$NT_NAV_TYPE$NT_NAV_ST$U_ALONE$NT_DOMCONTENTLOADED_END$NT_RED_ST$NT_RED_END$NT_FET_ST$NT_DNS_ST$NT_DNS_END$NT_DOMINT$NT_DOMCONTLOADED_ST$NT_DOMCOMP$NT_LOAD_ST$NT_LOAD_END$NT_UNLOAD_ST$NT_SSL_ST$NT_SPDY$NT_FIRST_PAINT$V_ALONE$NT_CON_ST$NT_CON_END$NT_REQ_ST$RT_TSTART$RT_BSTART

NT_DNS_ST_BREAK="nt_dns_st=6414531011668&"
RUM_URL_TEST6=$BASE_URL$USER_IP$RT_START$RT_TSTART$RT_BSTART$RT_END$T_RESP$T_PAGE$T_DONE$SINGLE_R$T_OTHER$NT$NT_RED_CNT$NT_NAV_TYPE$NT_NAV_ST$NT_RED_ST$NT_RED_END$NT_FET_ST$NT_DNS_ST_BREAK$NT_DNS_END$NT_CON_ST$NT_CON_END$NT_REQ_ST$NT_RES_ST$NT_RES_END$NT_DOWNLOADING$NT_DOMINT$NT_DOMCONTLOADED_ST$NT_DOMCONTENTLOADED_END$NT_DOMCOMP$NT_LOAD_ST$NT_LOAD_END$NT_UNLOAD_ST$NT_UNLOAD_END$NT_SSL_ST$NT_SPDY$NT_FIRST_PAINT$V_ALONE$U_ALONE

NT_CON_ST_BREAK="nt_con_st=0&"
RUM_URL_TEST7=$BASE_URL$USER_IP$RT_START$RT_TSTART$RT_BSTART$RT_END$T_RESP$T_PAGE$T_DONE$SINGLE_R$T_OTHER$NT$NT_RED_CNT$NT_NAV_TYPE$NT_NAV_ST$NT_RED_ST$NT_RED_END$NT_FET_ST$NT_DNS_ST$NT_DNS_END$NT_CON_ST_BREAK$NT_CON_END$NT_REQ_ST$NT_RES_ST$NT_RES_END$NT_DOWNLOADING$NT_DOMINT$NT_DOMCONTLOADED_ST$NT_DOMCONTENTLOADED_END$NT_DOMCOMP$NT_LOAD_ST$NT_LOAD_END$NT_UNLOAD_ST$NT_UNLOAD_END$NT_SSL_ST$NT_SPDY$NT_FIRST_PAINT$V_ALONE$U_ALONE

RT_TSTART_BREAK="rt.tstart=99999999999999999999999999&"
RUM_URL_TEST8=$BASE_URL$USER_IP$RT_START$RT_TSTART_BREAK$RT_BSTART$RT_END$T_RESP$T_PAGE$T_DONE$SINGLE_R$T_OTHER$NT$NT_RED_CNT$NT_NAV_TYPE$NT_NAV_ST$NT_RED_ST$NT_RED_END$NT_FET_ST$NT_DNS_ST$NT_DNS_END$NT_CON_ST$NT_CON_END$NT_REQ_ST$NT_RES_ST$NT_RES_END$NT_DOWNLOADING$NT_DOMINT$NT_DOMCONTLOADED_ST$NT_DOMCONTENTLOADED_END$NT_DOMCOMP$NT_LOAD_ST$NT_LOAD_END$NT_UNLOAD_ST$NT_UNLOAD_END$NT_SSL_ST$NT_SPDY$NT_FIRST_PAINT$V_ALONE$U_ALONE

# Missing DOM 
RUM_URL_TEST8=$BASE_URL$USER_IP$RT_START$RT_TSTART_BREAK$RT_BSTART$RT_END$T_RESP$T_PAGE$T_DONE$SINGLE_R$T_OTHER$NT$NT_RED_CNT$NT_NAV_TYPE$NT_NAV_ST$NT_RED_ST$NT_RED_END$NT_FET_ST$NT_DNS_ST$NT_DNS_END$NT_CON_ST$NT_CON_END$NT_REQ_ST$NT_RES_ST$NT_RES_END$NT_DOWNLOADING$NT_DOMINT$NT_DOMCONTLOADED_ST$NT_LOAD_ST$NT_LOAD_END$NT_UNLOAD_ST$NT_UNLOAD_END$NT_SSL_ST$NT_SPDY$NT_FIRST_PAINT$V_ALONE$U_ALONE



U_ALONE_readable="domain=rum_workflow_test_iad02-rum01.revdn.net."
# Leaving out NS_SSL_ST
ALL_VARS_RUM="$USER_IP $U_ALONE_readable $NT $NT_RED_CNT $NT_NAV_TYPE $NT_NAV_ST $NT_RED_ST $NT_RED_END $NT_FET_ST $NT_DNS_ST $NT_DNS_END $NT_CON_ST $NT_CON_END $NT_REQ_ST $NT_RES_ST $NT_RES_END $NT_DOWNLOADING $NT_DOMCONTLOADED_ST $NT_DOMCONTENTLOADED_END $NT_DOMCOMP $NT_LOAD_ST $NT_LOAD_END $NT_UNLOAD_ST $NT_UNLOAD_END $NT_SPDY $NT_FIRST_PAINT $V_ALONE"

OLD_OBJECT_ID=""
COUNT=1

while [ $COUNT -le $RUNNUMBER ]
do
	curl "$RUM_URL_TEST1"	
	RUM_OUT_TMP=`mktemp`
	echo "db.pl_info_events.find().sort( { \$natural: -1 } ).pretty().limit(1)" | mongo $MONGO_HOST/cube_development | sed 's/\s//g'| sed 's/[",]//g' | sed 's/:/=/' > $RUM_OUT_TMP
	OBJECT_ID=`cat $RUM_OUT_TMP | grep ObjectId | cut -d\( -f2 | sed 's/)//g'`
	if [ "$OBJECT_ID" == "$OLD_OBJECT_ID" ]; then
        	echo "Same RUM record. RUM did not store for URL $COUNT"
                echo "Error on $COUNT, the RUM db has no record of the data"
                exit $STATE_UNKNOWN
        fi
	echo "Object $OBJECT_ID Stored correctly for run $COUNT"
	(( COUNT++ ))
	OLD_OBJECT_ID=$OBJECT_ID
	rm $RUM_OUT_TMP

done



OLD_OBJECT_ID=""
COUNT=1


for TMP_URL in $RUM_URL_TEST1 $RUM_URL_TEST2 $RUM_URL_TEST3 $RUM_URL_TEST4 $RUM_URL_TEST5 $RUM_URL_TEST6 $RUM_URL_TEST7 $RUM_URL_TEST8
do

curl "$TMP_URL"

# echo $RUM_URL_TEST1 awk -v k=text '{n=split($0,a,"&"); for (i=1; i<=n; i++) print a[i]}'

RUM_OUT_TMP=`mktemp`



echo "db.pl_info_events.find().sort( { \$natural: -1 } ).pretty().limit(1)" | mongo $MONGO_HOST/cube_development | sed 's/\s//g'| sed 's/[",]//g' | sed 's/:/=/' > $RUM_OUT_TMP

OBJECT_ID=`cat $RUM_OUT_TMP | grep ObjectId | cut -d\( -f2 | sed 's/)//g'`
echo "###########################################"
echo "Starting tests for $OBJECT_ID on URL $COUNT"

if [ "$OBJECT_ID" == "$OLD_OBJECT_ID" ]; then
	if [ $COUNT -eq 1 -o $COUNT -eq 2 -o $COUNT -eq 3 -o $COUNT -eq 4 ]; then
		echo "Error on $COUNT, the RUM db has no record of the data"
		exit $STATE_UNKNOWN
	fi
	echo "Same RUM record. RUM did not store for URL $COUNT failure test PASS"
	rm $RUM_OUT_TMP
	(( COUNT++ ))
	continue
else
	echo "RUM Record took for $OBJECT_ID"
fi

RUM_OUT=`cat $RUM_OUT_TMP`
 

i=0

for i in $ALL_VARS_RUM
do
	c=0;
	VAL=${i%?}
	for p in $RUM_OUT
	do
		if [ "$VAL" == "$p" ]; then
			echo "We have a match for "$VAL
			c=1;
		fi
	done
	if [ "$c" != "1" ]; then
		echo NO MATCH FOR $VAL
		exit $STATE_UNKNOWN
		c=0;
	fi

done		


echo "Math Check for URL $COUNT"


BROWSERTIME_L=""
BROWSERTIME_R=""
NETWORKTIME_L=""
NETWORKTIME_R=""
BACKENDTIME_L=""
BACKENDTIME_R=""
PAGELOADTIME_R=""
PAGELOADTIME_L=""
FBTIME_R=""
FBTIME_L=""


BROWSERTIME_R=`grep browserTime $RUM_OUT_TMP | cut -d= -f2`
BROWSERTIME_L=$(($NT_LOAD_END_VAR - $NT_DOWNLOADING_VAR))
if [ $BROWSERTIME_L -ne $BROWSERTIME_R ]; then
	echo "Browser Times do not match: $BROWSERTIME_L $BROWSERTIME_R"
	exit $STATE_UNKNOWN
else
	echo "Browser Time match simulated $BROWSERTIME_L Mongo $BROWSERTIME_R"
fi

NETWORKTIME_R=`grep networkTime $RUM_OUT_TMP | cut -d= -f2`
NETWORKTIME_L=$(($NT_CON_END_VAR - $NT_DNS_ST_VAR))
if [ $NETWORKTIME_L -ne $NETWORKTIME_R ]; then
	echo "Network Times do not match: $NETWORKTIME_L $NETWORKTIME_R"
	exit $STATE_UNKNOWN
else
	echo "Network Time match simulated $NETWORKTIME_L Mongo $NETWORKTIME_R"
fi

BACKENDTIME_R=`grep backendTime $RUM_OUT_TMP | cut -d= -f2`
BACKENDTIME_L=$(($NT_RES_END_VAR - $NT_RES_ST_VAR))
if [ $BACKENDTIME_L -ne $BACKENDTIME_R ]; then
	echo "Backend Time does not match: $BACKENDTIME_L $BACKENDTIME_R"
	exit $STATE_UNKNOWN
else
	echo "Backend Time match simulated $BACKENDTIME_L Mongo $BACKENDTIME_R"
fi


PAGELOADTIME_R=`grep pageloadTime $RUM_OUT_TMP | cut -d= -f2`
PAGELOADTIME_L=$(($NT_LOAD_END_VAR - $NT_NAV_ST_VAR))
if [ $PAGELOADTIME_R -ne $PAGELOADTIME_L ]; then
	echo "PageLoadTime does not match: $PAGELOADTIME_L $PAGELOADTIME_R"
	exit $STATE_UNKNOWN
else
	echo "PageLoadTime Match simulated $PAGELOADTIME_L Mongo $PAGELOADTIME_R"
fi



FBTIME_R=`grep fbTime $RUM_OUT_TMP | cut -d= -f2`
FBTIME_L=$(($NT_RES_ST_VAR - $NT_CON_END_VAR))
if [ $FBTIME_L -ne $FBTIME_R ]; then
	echo "FBTIME does not match $FBTIME_L $FBTIME_R"
	exit $STATE_UNKNOWN
else
	echo "fbTime is a match simulated $FBTIME_L Mongo $FBTIME_R"
fi

OLD_OBJECT_ID=$OBJECT_ID

rm $RUM_OUT_TMP
(( COUNT++ ))
done

##############################################################################%?}
exit $STATE_O

